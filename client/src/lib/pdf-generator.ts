import jsPDF from 'jspdf';

export interface FormulationData {
  skinType: string;
  format: string;
  actives: string[];
  extracts: string[];
  hydrators: string[];
  firstName: string;
  lastName: string;
  email: string;
  skinConcerns?: string;
  safetyScore: number;
  aiSuggestion?: string;
}

export function generateFormulationPDF(data: FormulationData): Blob {
  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Custom Skincare Formulation', 20, 30);
  
  // Subtitle
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Formulated for ${data.firstName} ${data.lastName}`, 20, 40);
  doc.text(`${formatProductName(data.format)} for ${data.skinType} skin`, 20, 48);
  
  // Customer Information
  let yPos = 65;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Customer Information', 20, yPos);
  yPos += 10;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Name: ${data.firstName} ${data.lastName}`, 20, yPos);
  yPos += 8;
  doc.text(`Email: ${data.email}`, 20, yPos);
  yPos += 8;
  doc.text(`Skin Type: ${data.skinType}`, 20, yPos);
  yPos += 8;
  if (data.skinConcerns) {
    doc.text(`Skin Concerns: ${data.skinConcerns}`, 20, yPos);
    yPos += 8;
  }
  
  // Product Details
  yPos += 10;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Product Details', 20, yPos);
  yPos += 10;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Format: ${formatProductName(data.format)}`, 20, yPos);
  yPos += 8;
  doc.text(`Safety Score: ${data.safetyScore}/100`, 20, yPos);
  yPos += 15;
  
  // Active Ingredients
  if (data.actives.length > 0) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Active Ingredients', 20, yPos);
    yPos += 8;
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    data.actives.forEach(active => {
      const percentage = getIngredientPercentage(active);
      doc.text(`• ${formatIngredientName(active)}${percentage ? ` (${percentage})` : ''}`, 25, yPos);
      yPos += 6;
    });
    yPos += 5;
  }
  
  // Botanical Extracts
  if (data.extracts.length > 0) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Botanical Extracts', 20, yPos);
    yPos += 8;
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    data.extracts.forEach(extract => {
      doc.text(`• ${formatIngredientName(extract)}`, 25, yPos);
      yPos += 6;
    });
    yPos += 5;
  }
  
  // Hydrators
  if (data.hydrators.length > 0) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Hydration Boosters', 20, yPos);
    yPos += 8;
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    data.hydrators.forEach(hydrator => {
      const percentage = getIngredientPercentage(hydrator);
      doc.text(`• ${formatIngredientName(hydrator)}${percentage ? ` (${percentage})` : ''}`, 25, yPos);
      yPos += 6;
    });
    yPos += 10;
  }
  
  // Full INCI List
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Full Ingredient List (INCI)', 20, yPos);
  yPos += 8;
  
  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  const inciList = generateINCIList(data);
  const splitText = doc.splitTextToSize(inciList, 170);
  doc.text(splitText, 20, yPos);
  yPos += splitText.length * 4 + 10;
  
  // Usage Instructions
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Usage Instructions', 20, yPos);
  yPos += 8;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  const instructions = [
    '• Apply to clean, dry skin',
    '• Use morning and evening',
    '• Follow with moisturizer if needed',
    '• Always use sunscreen during the day',
    '• Patch test recommended before first use'
  ];
  
  instructions.forEach(instruction => {
    doc.text(instruction, 20, yPos);
    yPos += 6;
  });
  
  // AI Suggestion (if available)
  if (data.aiSuggestion && yPos < 250) {
    yPos += 10;
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('AI Formulation Notes', 20, yPos);
    yPos += 8;
    
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    const aiText = doc.splitTextToSize(data.aiSuggestion, 170);
    doc.text(aiText, 20, yPos);
  }
  
  // Footer
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by SkinCraft Custom Formulation System', 20, 280);
  doc.text(`Created on: ${new Date().toLocaleDateString()}`, 20, 287);
  
  return doc.output('blob');
}

function formatProductName(format: string): string {
  switch (format) {
    case 'mist': return 'Energizing Mist';
    case 'serum': return 'Concentrated Serum';
    case 'cream': return 'Nourishing Cream';
    default: return 'Custom Product';
  }
}

function formatIngredientName(ingredient: string): string {
  return ingredient.split('-').map(word => 
    word.charAt(0).toUpperCase() + word.slice(1)
  ).join(' ');
}

function getIngredientPercentage(ingredient: string): string {
  const percentages: Record<string, string> = {
    'caffeine': '1.5%',
    'retinol': '0.3%',
    'niacinamide': '5%',
    'vitamin-c': '15%',
    'salicylic-acid': '1%',
    'azelaic-acid': '10%',
    'glycerin': '5%',
    'sodium-pca': '2%',
    'hyaluronic-acid': '1%',
    'ceramides': '2%'
  };
  return percentages[ingredient] || '';
}

function generateINCIList(data: FormulationData): string {
  const baseIngredients = ['Aqua'];
  
  const allIngredients = [
    ...baseIngredients,
    ...data.hydrators.map(h => getINCIName(h)),
    ...data.actives.map(a => getINCIName(a)),
    ...data.extracts.map(e => getINCIName(e)),
    'Phenoxyethanol',
    'Ethylhexylglycerin',
    'Citric Acid'
  ].filter(Boolean);
  
  return allIngredients.join(', ');
}

function getINCIName(ingredient: string): string {
  const inciNames: Record<string, string> = {
    'caffeine': 'Caffeine',
    'retinol': 'Retinol',
    'niacinamide': 'Niacinamide',
    'vitamin-c': 'Ascorbic Acid',
    'salicylic-acid': 'Salicylic Acid',
    'azelaic-acid': 'Azelaic Acid',
    'glycerin': 'Glycerin',
    'sodium-pca': 'Sodium PCA',
    'hyaluronic-acid': 'Sodium Hyaluronate',
    'ceramides': 'Ceramide NP',
    'neem': 'Azadirachta Indica Leaf Extract',
    'beetroot': 'Beta Vulgaris Root Extract',
    'oat': 'Avena Sativa Kernel Extract',
    'green-tea': 'Camellia Sinensis Leaf Extract',
    'chamomile': 'Chamomilla Recutita Flower Extract',
    'aloe-vera': 'Aloe Barbadensis Leaf Extract'
  };
  return inciNames[ingredient] || formatIngredientName(ingredient);
}
