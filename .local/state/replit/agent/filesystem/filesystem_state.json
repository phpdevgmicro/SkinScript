{"file_contents":{"replit.md":{"content":"# Build Your Own Energizing Mist - Skincare Formulation Tool\n\n## Overview\n\nThis is an interactive web application that allows users to create personalized skincare formulations, specifically energizing mists. The app guides users through a multi-step process to select skin types, base formats, key active ingredients, botanical extracts, and boosters while enforcing compatibility rules between ingredients. The application features a modern, responsive design with form validation and data persistence capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Single Page Application (SPA)**: Built with vanilla HTML, CSS, and JavaScript without frameworks\n- **Component-Based Design**: Modular CSS classes and JavaScript methods for different form sections\n- **Responsive Layout**: Mobile-first design using CSS Grid and Flexbox with clamp() functions for fluid typography\n- **Progressive Enhancement**: Form works without JavaScript, with enhanced UX when enabled\n\n### Form Management System\n- **Multi-Step Form Flow**: Sections for skin type, base format, key actives, extracts, boosters, and contact information\n- **State Management**: Centralized form data object tracking user selections across all sections\n- **Validation Engine**: Custom validation rules for required fields, selection limits, and ingredient compatibility\n- **Data Persistence**: localStorage integration for saving and restoring user progress\n\n### Ingredient Compatibility System\n- **Rule-Based Validation**: Predefined incompatible ingredient combinations (retinol + vitamin C, etc.)\n- **Dynamic UI Updates**: Real-time enabling/disabling of options based on current selections\n- **Selection Limits**: Maximum of 3 key active ingredients with counter tracking\n- **Conflict Prevention**: Automatic validation prevents incompatible ingredient selection\n\n### User Interface Design\n- **Modern CSS Architecture**: Custom properties, gradients, and backdrop filters for visual appeal\n- **Interactive Components**: Custom checkbox cards, radio buttons, and form controls with hover/focus states\n- **Icon Integration**: Font Awesome icons throughout the interface for visual hierarchy\n- **Loading States**: Visual feedback for form submission and processing states\n\n### Data Flow Architecture\n- **Event-Driven Updates**: DOM event listeners trigger state changes and UI updates\n- **Unidirectional Data Flow**: Form data flows from user input → validation → state update → UI refresh\n- **Error Handling**: Comprehensive validation with user-friendly error messages\n- **Success Feedback**: Confirmation systems for successful form completion\n\n## External Dependencies\n\n### CDN Resources\n- **Google Fonts**: Inter font family for typography\n- **Font Awesome**: Icon library (v6.4.0) for UI elements\n- **Pixabay Images**: External image hosting for hero section visuals\n\n### Browser APIs\n- **localStorage**: Client-side data persistence for form state\n- **DOM APIs**: Event handling, form validation, and dynamic content updates\n- **CSS Features**: Modern CSS properties including backdrop-filter, clamp(), and CSS Grid\n\n### Potential Integrations\n- **Email Services**: Form submission likely requires backend email integration\n- **Analytics**: User interaction tracking for formulation preferences\n- **Database Storage**: Future enhancement for saving user formulations and preferences","size_bytes":3450},"script.js":{"content":"/**\n * Skincare Formulation App - Modern JavaScript Implementation\n * Clean, modular architecture for better maintainability\n */\n\nclass SkincareApp {\n    constructor() {\n        // App configuration\n        this.config = {\n            maxKeyActives: 3,\n            apiEndpoint: '/api/submit_formulation.php'\n        };\n\n        // App state\n        this.state = {\n            formData: {\n                skinType: [],\n                baseFormat: 'mist',\n                keyActives: [],\n                extracts: [],\n                boosters: [],\n                contact: {}\n            },\n            selectedKeyActives: 0,\n            isSubmitting: false\n        };\n\n        // Ingredient compatibility rules\n        this.incompatibleCombinations = [\n            ['retinol', 'vitamin-c'],\n            ['retinol', 'niacinamide'],\n            ['vitamin-c', 'niacinamide']\n        ];\n\n        this.init();\n    }\n\n    // Initialization\n    init() {\n        this.bindEvents();\n        this.updateUI();\n        this.updateAllSidebarSections(); // Initialize sidebar with current data\n        console.log('Skincare Formulation App initialized');\n    }\n\n    // Event Binding\n    bindEvents() {\n        this.bindFormEvents();\n        this.bindSectionEvents();\n        this.bindInputEvents();\n    }\n\n    bindFormEvents() {\n        const form = document.getElementById('formulationForm');\n        form?.addEventListener('submit', (e) => this.handleFormSubmit(e));\n\n        const previewBtn = document.getElementById('previewBtn');\n        previewBtn?.addEventListener('click', () => this.previewFormulation());\n    }\n\n    bindSectionEvents() {\n        // Bind events for each form section\n        this.bindSkinTypeEvents();\n        this.bindBaseFormatEvents();\n        this.bindKeyActivesEvents();\n        this.bindExtractsEvents();\n        this.bindBoostersEvents();\n        this.bindContactEvents();\n    }\n\n    bindSkinTypeEvents() {\n        const inputs = document.querySelectorAll('input[name=\"skinType\"]');\n        inputs.forEach(input => {\n            input.addEventListener('change', () => this.handleSkinTypeChange());\n        });\n    }\n\n    bindBaseFormatEvents() {\n        const inputs = document.querySelectorAll('input[name=\"baseFormat\"]');\n        inputs.forEach(input => {\n            input.addEventListener('change', () => this.handleBaseFormatChange());\n        });\n    }\n\n    bindKeyActivesEvents() {\n        const inputs = document.querySelectorAll('input[name=\"keyActives\"]');\n        inputs.forEach(input => {\n            input.addEventListener('change', () => this.handleKeyActivesChange());\n        });\n    }\n\n    bindExtractsEvents() {\n        const inputs = document.querySelectorAll('input[name=\"extracts\"]');\n        inputs.forEach(input => {\n            input.addEventListener('change', () => this.handleExtractsChange());\n        });\n    }\n\n    bindBoostersEvents() {\n        const inputs = document.querySelectorAll('input[name=\"boosters\"]');\n        inputs.forEach(input => {\n            input.addEventListener('change', () => this.handleBoostersChange());\n        });\n    }\n\n    bindContactEvents() {\n        const inputs = document.querySelectorAll('#contactSection input, #contactSection textarea');\n        inputs.forEach(input => {\n            input.addEventListener('blur', () => this.validateContactField(input));\n            input.addEventListener('input', () => this.handleContactChange());\n        });\n    }\n\n    bindInputEvents() {\n        // Global form change listener\n        document.addEventListener('change', (e) => {\n            // Handle specific form element changes\n            if (e.target.name === 'skinType') {\n                this.handleSkinTypeChange();\n            } else if (e.target.name === 'baseFormat') {\n                this.handleBaseFormatChange();\n            } else if (e.target.name === 'keyActives') {\n                this.handleKeyActivesChange();\n            } else if (e.target.name === 'extracts') {\n                this.handleExtractsChange();\n            } else if (e.target.name === 'boosters') {\n                this.handleBoostersChange();\n            }\n            \n            this.updateUI();\n        });\n\n        // Make checkbox and radio items clickable\n        this.bindClickableItems();\n    }\n\n    bindClickableItems() {\n        // Simplified clickable items handling\n        document.querySelectorAll('.checkbox-item, .radio-item').forEach(item => {\n            item.addEventListener('click', (e) => {\n                // Only handle clicks on the container, not on the input or label directly\n                if (e.target.type === 'checkbox' || e.target.type === 'radio' || \n                    e.target.tagName === 'LABEL' || e.target.closest('label')) {\n                    return;\n                }\n                \n                const input = item.querySelector('input[type=\"checkbox\"], input[type=\"radio\"]');\n                if (input && !input.disabled) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    \n                    if (input.type === 'checkbox') {\n                        input.checked = !input.checked;\n                    } else if (input.type === 'radio') {\n                        input.checked = true;\n                    }\n                    \n                    // Trigger change event immediately\n                    input.dispatchEvent(new Event('change', { bubbles: true }));\n                }\n            });\n\n            // Ensure proper cursor style\n            item.style.cursor = 'pointer';\n        });\n    }\n\n    // Event Handlers\n    handleSkinTypeChange() {\n        const selectedTypes = this.getSelectedValues('skinType');\n        this.state.formData.skinType = selectedTypes;\n        \n        this.updateSidebar('skinTypeItems', selectedTypes, 'Select your skin type');\n        this.clearError('skinTypeError');\n        this.addVisualFeedback('skinTypeSection');\n    }\n\n    handleBaseFormatChange() {\n        const selected = document.querySelector('input[name=\"baseFormat\"]:checked');\n        this.state.formData.baseFormat = selected ? selected.value : '';\n        \n        const formatArray = selected ? [selected.value] : [];\n        this.updateSidebar('baseFormatItems', formatArray, 'Choose format');\n        this.addVisualFeedback('baseFormatSection');\n    }\n\n    handleKeyActivesChange() {\n        const selectedActives = this.getSelectedValues('keyActives');\n        this.state.formData.keyActives = selectedActives;\n        this.state.selectedKeyActives = selectedActives.length;\n        \n        this.updateKeyActivesUI();\n        this.updateSidebar('keyActivesItems', selectedActives, 'Select up to 3 actives');\n        this.checkCompatibility();\n        this.clearError('keyActivesError');\n        this.addVisualFeedback('keyActivesSection');\n    }\n\n    handleExtractsChange() {\n        const selectedExtracts = this.getSelectedValues('extracts');\n        this.state.formData.extracts = selectedExtracts;\n        \n        this.updateSidebar('extractsItems', selectedExtracts, 'Add botanical extracts');\n        this.addVisualFeedback('extractsSection');\n    }\n\n    handleBoostersChange() {\n        const selectedBoosters = this.getSelectedValues('boosters');\n        this.state.formData.boosters = selectedBoosters;\n        \n        this.updateSidebar('boostersItems', selectedBoosters, 'Add hydrating boosters');\n        this.addVisualFeedback('boostersSection');\n    }\n\n    handleContactChange() {\n        this.state.formData.contact = {\n            fullName: document.getElementById('fullName')?.value || '',\n            email: document.getElementById('email')?.value || '',\n            skinConcerns: document.getElementById('skinConcerns')?.value || ''\n        };\n        this.updateUI();\n    }\n\n    // UI Updates\n    updateUI() {\n        this.updateSubmitButton();\n        this.updatePreviewButton();\n    }\n\n    updateKeyActivesUI() {\n        this.updateActivesCounter();\n        this.toggleActivesAvailability();\n    }\n\n    updateActivesCounter() {\n        const counter = document.getElementById('activesCounter');\n        const sidebarCounter = document.getElementById('activesCounterSidebar');\n        const count = `${this.state.selectedKeyActives}/${this.config.maxKeyActives}`;\n        \n        if (counter) counter.textContent = count;\n        if (sidebarCounter) sidebarCounter.textContent = count;\n    }\n\n    toggleActivesAvailability() {\n        const inputs = document.querySelectorAll('input[name=\"keyActives\"]');\n        inputs.forEach(input => {\n            input.disabled = !input.checked && this.state.selectedKeyActives >= this.config.maxKeyActives;\n        });\n    }\n\n    updateSubmitButton() {\n        const submitBtn = document.getElementById('submitBtn');\n        if (!submitBtn) return;\n        \n        const hasRequired = this.hasRequiredSelections();\n        submitBtn.disabled = !hasRequired || this.state.isSubmitting;\n    }\n\n    updatePreviewButton() {\n        const previewBtn = document.getElementById('previewBtn');\n        if (!previewBtn) return;\n        \n        previewBtn.disabled = !this.hasValidSelections();\n    }\n\n    updateSidebar(containerId, items, placeholder) {\n        const container = document.getElementById(containerId);\n        if (!container) return;\n\n        if (containerId === 'extractsItems' || containerId === 'boostersItems') {\n            // Handle extras section\n            if (items.length === 0) {\n                container.innerHTML = '';\n            } else {\n                container.innerHTML = items.map(item => this.formatDisplayName(item)).join(', ');\n            }\n            \n            // Show/hide extras row\n            const extrasRow = document.getElementById('extrasRow');\n            const extractsItems = document.getElementById('extractsItems');\n            const boostersItems = document.getElementById('boostersItems');\n            const hasExtras = extractsItems.innerHTML.trim() || boostersItems.innerHTML.trim();\n            \n            if (extrasRow) {\n                extrasRow.style.display = hasExtras ? 'flex' : 'none';\n            }\n        } else {\n            // Handle main items (skin type, format, actives)\n            if (items.length === 0) {\n                container.innerHTML = placeholder;\n            } else {\n                container.innerHTML = items.map(item => this.formatDisplayName(item)).join(', ');\n            }\n        }\n    }\n\n    removeIngredient(containerId, ingredient) {\n        // Determine which form section this belongs to\n        const sectionMap = {\n            'skinTypeItems': 'skinType',\n            'keyActivesItems': 'keyActives', \n            'extractsItems': 'extracts',\n            'boostersItems': 'boosters'\n        };\n        \n        const sectionName = sectionMap[containerId];\n        if (!sectionName) return;\n        \n        // Uncheck the corresponding form element\n        const checkbox = document.getElementById(ingredient);\n        if (checkbox) {\n            checkbox.checked = false;\n            // Trigger the appropriate handler\n            checkbox.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n    }\n\n    addVisualFeedback(sectionId) {\n        const section = document.getElementById(sectionId);\n        if (!section) return;\n        \n        section.classList.add('fade-in');\n        setTimeout(() => section.classList.remove('fade-in'), 500);\n    }\n\n    // Validation\n    validateForm() {\n        let isValid = true;\n        const errors = [];\n\n        // Validate required selections\n        if (this.state.formData.skinType.length === 0) {\n            this.showError('skinTypeError', 'Please select at least one skin type');\n            isValid = false;\n        }\n\n        if (this.state.formData.keyActives.length === 0) {\n            this.showError('keyActivesError', 'Please select at least one key ingredient');\n            isValid = false;\n        }\n\n        // Validate contact fields\n        const nameField = document.getElementById('fullName');\n        const emailField = document.getElementById('email');\n        \n        if (!this.validateContactField(nameField) || !this.validateContactField(emailField)) {\n            isValid = false;\n        }\n\n        return isValid;\n    }\n\n    validateContactField(field) {\n        if (!field) return false;\n        \n        const value = field.value.trim();\n        const validators = {\n            fullName: (val) => ({\n                valid: val.length >= 2,\n                message: val.length === 0 ? 'Full name is required' : 'Name must be at least 2 characters'\n            }),\n            email: (val) => ({\n                valid: val.length > 0 && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val),\n                message: val.length === 0 ? 'Email address is required' : 'Please enter a valid email address'\n            })\n        };\n\n        const validator = validators[field.name];\n        if (!validator) return true;\n\n        const result = validator(value);\n        this.displayFieldError(field.name, result.message, !result.valid);\n        return result.valid;\n    }\n\n    // Compatibility Checking\n    checkCompatibility() {\n        const warnings = this.getCompatibilityWarnings();\n        this.displayCompatibilityWarnings(warnings);\n    }\n\n    getCompatibilityWarnings() {\n        const selectedActives = this.state.formData.keyActives;\n        return this.incompatibleCombinations\n            .filter(combo => combo.every(ingredient => selectedActives.includes(ingredient)))\n            .map(combo => `${this.formatDisplayName(combo[0])} and ${this.formatDisplayName(combo[1])} may not be compatible when used together.`);\n    }\n\n    displayCompatibilityWarnings(warnings) {\n        // Remove existing warnings\n        document.querySelectorAll('.compatibility-warning').forEach(el => el.remove());\n        \n        if (warnings.length === 0) return;\n\n        const section = document.getElementById('keyActivesSection');\n        if (!section) return;\n\n        const warningDiv = document.createElement('div');\n        warningDiv.className = 'compatibility-warning show';\n        warningDiv.innerHTML = `\n            <i class=\"fas fa-exclamation-triangle\"></i>\n            <strong>Compatibility Notice:</strong>\n            <ul style=\"margin-top: 0.5rem; margin-left: 1.5rem;\">\n                ${warnings.map(warning => `<li>${warning}</li>`).join('')}\n            </ul>\n        `;\n        section.appendChild(warningDiv);\n    }\n\n    // Form Submission\n    async handleFormSubmit(event) {\n        event.preventDefault();\n        \n        if (!this.validateForm()) {\n            this.scrollToFirstError();\n            return;\n        }\n        \n        this.state.isSubmitting = true;\n        this.showSubmissionState(true);\n        \n        try {\n            const submissionData = this.prepareSubmissionData();\n            const response = await this.submitToBackend(submissionData);\n            \n            if (response.formulation) {\n                this.displayResults(response.formulation, response.pdf);\n            } else {\n                this.displaySuccessMessage();\n            }\n            this.scrollToStatus();\n            \n        } catch (error) {\n            console.error('Submission error:', error);\n            this.displayErrorMessage();\n        } finally {\n            this.state.isSubmitting = false;\n            this.showSubmissionState(false);\n        }\n    }\n\n    showSubmissionState(isSubmitting) {\n        const submitBtn = document.getElementById('submitBtn');\n        if (!submitBtn) return;\n        \n        if (isSubmitting) {\n            submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Submitting...';\n        } else {\n            submitBtn.innerHTML = 'Submit Request';\n        }\n        \n        this.updateSubmitButton();\n    }\n\n    prepareSubmissionData() {\n        return this.getFormDataAsJSON();\n    }\n\n    async submitToBackend(data) {\n        const response = await fetch(this.config.apiEndpoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        });\n        \n        const responseData = await response.json();\n        \n        if (!response.ok) {\n            throw new Error(responseData.error || 'Network response was not ok');\n        }\n        \n        return responseData;\n    }\n\n    // Display Results\n    displayResults(formulation, pdfInfo) {\n        const statusDiv = document.getElementById('submissionStatus');\n        if (!statusDiv) return;\n\n        statusDiv.className = 'status-message formulation-results';\n        statusDiv.innerHTML = this.buildResultsHTML(formulation, pdfInfo);\n    }\n\n    buildResultsHTML(formulation, pdfInfo) {\n        const formulaRows = Object.entries(formulation.formula || {})\n            .map(([ingredient, percentage]) => \n                `<tr><td>${this.formatDisplayName(ingredient)}</td><td>${percentage}%</td></tr>`\n            ).join('');\n\n        const recommendations = formulation.recommendations?.length > 0 ? \n            `<div class=\"recommendations-section\">\n                <h4><i class=\"fas fa-lightbulb\"></i> Usage Recommendations:</h4>\n                <ul>${formulation.recommendations.map(rec => `<li>${rec}</li>`).join('')}</ul>\n            </div>` : '';\n\n        const pdfSection = pdfInfo?.success ? \n            `<div class=\"pdf-section\">\n                <h4><i class=\"fas fa-file-pdf\"></i> Your Formulation Document</h4>\n                <p>Download your personalized formulation guide:</p>\n                <a href=\"${pdfInfo.download_url}\" class=\"pdf-download-btn\" target=\"_blank\">\n                    <i class=\"fas fa-download\"></i> Download PDF${pdfInfo.fallback ? ' (HTML Format)' : ''}\n                </a>\n            </div>` : '';\n\n        return `\n            <div class=\"formulation-header\">\n                <i class=\"fas fa-flask\"></i>\n                <h3>${formulation.title}</h3>\n                <div class=\"profile-badge\">${formulation.profile}</div>\n            </div>\n            <div class=\"formulation-description\">\n                <p>${formulation.description}</p>\n            </div>\n            <div class=\"formulation-breakdown\">\n                <h4><i class=\"fas fa-list-ul\"></i> Formulation Breakdown (% w/w)</h4>\n                <table class=\"formula-table\">\n                    <thead><tr><th>Ingredient</th><th>Percentage</th></tr></thead>\n                    <tbody>${formulaRows}</tbody>\n                </table>\n            </div>\n            ${recommendations}\n            ${pdfSection}\n            <div class=\"formulation-footer\">\n                <p><i class=\"fas fa-info-circle\"></i> Formulation ID: ${formulation.formulation_id}</p>\n                <p>Generated on ${formulation.generated_at}</p>\n            </div>\n        `;\n    }\n\n    displaySuccessMessage() {\n        const statusDiv = document.getElementById('submissionStatus');\n        if (!statusDiv) return;\n\n        statusDiv.className = 'status-message success';\n        statusDiv.innerHTML = `\n            <i class=\"fas fa-check-circle\"></i>\n            <strong>Request Submitted Successfully!</strong><br>\n            We'll review your custom formulation and get back to you within 24 hours at ${this.state.formData.contact.email}.\n        `;\n    }\n\n    displayErrorMessage() {\n        const statusDiv = document.getElementById('submissionStatus');\n        if (!statusDiv) return;\n\n        statusDiv.className = 'status-message error';\n        statusDiv.innerHTML = `\n            <i class=\"fas fa-exclamation-circle\"></i>\n            <strong>Submission Failed</strong><br>\n            Please try again. If the problem persists, contact support.\n        `;\n    }\n\n    // Data Management - Keep data in JSON format for backend submission\n    getFormDataAsJSON() {\n        return {\n            timestamp: new Date().toISOString(),\n            formulation: {\n                skinType: this.state.formData.skinType,\n                baseFormat: this.state.formData.baseFormat,\n                keyActives: this.state.formData.keyActives,\n                extracts: this.state.formData.extracts,\n                boosters: this.state.formData.boosters\n            },\n            contact: this.state.formData.contact,\n            userAgent: navigator.userAgent,\n            screenResolution: `${screen.width}x${screen.height}`,\n            formVersion: '2.0'\n        };\n    }\n\n    updateAllSidebarSections() {\n        // Update all sidebar sections with current form data\n        this.updateSidebar('skinTypeItems', this.state.formData.skinType, 'Select your skin type');\n        \n        const formatArray = this.state.formData.baseFormat ? [this.state.formData.baseFormat] : [];\n        this.updateSidebar('baseFormatItems', formatArray, 'Choose format');\n        \n        this.updateSidebar('keyActivesItems', this.state.formData.keyActives, 'Select up to 3 actives');\n        this.updateSidebar('extractsItems', this.state.formData.extracts, 'Add botanical extracts');\n        this.updateSidebar('boostersItems', this.state.formData.boosters, 'Add hydrating boosters');\n        \n        // Update counters\n        const count = `${this.state.selectedKeyActives}/${this.config.maxKeyActives}`;\n        const sidebarCounter = document.getElementById('activesCounterSidebar');\n        if (sidebarCounter) sidebarCounter.textContent = count;\n    }\n\n\n    // Utility Functions\n    getSelectedValues(name) {\n        return Array.from(document.querySelectorAll(`input[name=\"${name}\"]:checked`))\n            .map(input => input.value);\n    }\n\n    hasRequiredSelections() {\n        return this.state.formData.skinType.length > 0 && \n               this.state.formData.keyActives.length > 0 &&\n               this.state.formData.contact.fullName &&\n               this.state.formData.contact.email;\n    }\n\n    hasValidSelections() {\n        return this.state.formData.skinType.length > 0 || \n               this.state.formData.baseFormat || \n               this.state.formData.keyActives.length > 0 || \n               this.state.formData.extracts.length > 0 || \n               this.state.formData.boosters.length > 0;\n    }\n\n    formatDisplayName(ingredient) {\n        let formatted = ingredient.replace(/-/g, ' ');\n        formatted = formatted.replace(/\\b\\w/g, l => l.toUpperCase());\n        \n        const replacements = {\n            'L Carnitine': 'L-Carnitine',\n            'Beta Vulgaris': 'Beta Vulgaris (Beet Root)',\n            'Avena Sativa': 'Avena Sativa (Oat)',\n            'Green Tea': 'Green Tea Extract',\n            'Sodium Pca': 'Sodium PCA',\n            'Copper Peptides': 'Copper Peptides'\n        };\n        \n        return replacements[formatted] || formatted;\n    }\n\n    showError(elementId, message) {\n        const element = document.getElementById(elementId);\n        if (element) {\n            element.textContent = message;\n            element.classList.add('show');\n        }\n    }\n\n    clearError(elementId) {\n        const element = document.getElementById(elementId);\n        if (element) {\n            element.classList.remove('show');\n            element.textContent = '';\n        }\n    }\n\n    displayFieldError(fieldName, message, show) {\n        const errorElement = document.getElementById(`${fieldName}Error`);\n        if (errorElement) {\n            errorElement.textContent = message;\n            errorElement.classList.toggle('show', show);\n        }\n    }\n\n    scrollToFirstError() {\n        const firstError = document.querySelector('.error-message.show');\n        firstError?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n\n    scrollToStatus() {\n        const statusDiv = document.getElementById('submissionStatus');\n        statusDiv?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n\n    // Preview functionality\n    previewFormulation() {\n        const previewData = this.generatePreviewData();\n        this.showPreviewModal(previewData);\n    }\n\n    generatePreviewData() {\n        const benefits = this.calculateBenefits();\n        const compatibility = this.getCompatibilityWarnings();\n        \n        return {\n            skinType: this.state.formData.skinType,\n            baseFormat: this.state.formData.baseFormat,\n            keyActives: this.state.formData.keyActives,\n            extracts: this.state.formData.extracts,\n            boosters: this.state.formData.boosters,\n            estimatedBenefits: benefits,\n            warnings: compatibility,\n            formulaTitle: this.generateFormulaTitle()\n        };\n    }\n\n    calculateBenefits() {\n        const benefits = new Set();\n        \n        // Benefits from key actives\n        this.state.formData.keyActives.forEach(active => {\n            switch(active) {\n                case 'caffeine':\n                    benefits.add('Energizing and circulation boost');\n                    break;\n                case 'l-carnitine':\n                    benefits.add('Firming and toning');\n                    break;\n                case 'retinol':\n                    benefits.add('Anti-aging and skin renewal');\n                    break;\n                case 'niacinamide':\n                    benefits.add('Pore refining and oil control');\n                    break;\n                case 'vitamin-c':\n                    benefits.add('Brightening and antioxidant protection');\n                    break;\n                case 'hyaluronic-acid':\n                    benefits.add('Deep hydration and plumping');\n                    break;\n            }\n        });\n\n        // Benefits from extracts\n        if (this.state.formData.extracts.length > 0) {\n            benefits.add('Natural botanical nourishment');\n        }\n\n        // Benefits from boosters\n        if (this.state.formData.boosters.length > 0) {\n            benefits.add('Enhanced moisturization and skin barrier support');\n        }\n\n        return Array.from(benefits);\n    }\n\n    generateFormulaTitle() {\n        const format = this.state.formData.baseFormat || 'mist';\n        const skinTypes = this.state.formData.skinType;\n        const mainActive = this.state.formData.keyActives[0];\n        \n        let title = 'Custom ';\n        if (mainActive) {\n            title += `${this.formatDisplayName(mainActive)} `;\n        }\n        title += `${this.formatDisplayName(format)}`;\n        \n        if (skinTypes.length > 0) {\n            title += ` for ${skinTypes.map(type => this.formatDisplayName(type)).join(' & ')} Skin`;\n        }\n        \n        return title;\n    }\n\n    showPreviewModal(previewData) {\n        // Create modal HTML\n        const modalHTML = `\n            <div class=\"modal fade\" id=\"previewModal\" tabindex=\"-1\" aria-labelledby=\"previewModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-lg\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header bg-gradient-primary text-white\">\n                            <h5 class=\"modal-title\" id=\"previewModalLabel\">\n                                <i class=\"fas fa-flask\"></i> ${previewData.formulaTitle}\n                            </h5>\n                            <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <div class=\"row\">\n                                <div class=\"col-md-6\">\n                                    <h6><i class=\"fas fa-list-ul\"></i> Your Selections</h6>\n                                    <div class=\"preview-section\">\n                                        <strong>Skin Type:</strong> ${previewData.skinType.map(type => this.formatDisplayName(type)).join(', ') || 'Not selected'}\n                                    </div>\n                                    <div class=\"preview-section\">\n                                        <strong>Format:</strong> ${this.formatDisplayName(previewData.baseFormat)}\n                                    </div>\n                                    <div class=\"preview-section\">\n                                        <strong>Key Actives:</strong> ${previewData.keyActives.map(active => this.formatDisplayName(active)).join(', ') || 'None selected'}\n                                    </div>\n                                    ${previewData.extracts.length > 0 ? `<div class=\"preview-section\"><strong>Extracts:</strong> ${previewData.extracts.map(extract => this.formatDisplayName(extract)).join(', ')}</div>` : ''}\n                                    ${previewData.boosters.length > 0 ? `<div class=\"preview-section\"><strong>Boosters:</strong> ${previewData.boosters.map(booster => this.formatDisplayName(booster)).join(', ')}</div>` : ''}\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <h6><i class=\"fas fa-star\"></i> Estimated Benefits</h6>\n                                    ${previewData.estimatedBenefits.length > 0 ? \n                                        `<ul class=\"benefits-list\">${previewData.estimatedBenefits.map(benefit => `<li><i class=\"fas fa-check-circle text-success\"></i> ${benefit}</li>`).join('')}</ul>` :\n                                        '<p class=\"text-muted\">Select key actives to see benefits</p>'\n                                    }\n                                    ${previewData.warnings.length > 0 ? \n                                        `<div class=\"alert alert-warning mt-3\">\n                                            <strong><i class=\"fas fa-exclamation-triangle\"></i> Compatibility Notes:</strong>\n                                            <ul class=\"mt-2 mb-0\">${previewData.warnings.map(warning => `<li>${warning}</li>`).join('')}</ul>\n                                        </div>` : ''\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n                            <button type=\"button\" class=\"btn btn-primary\" onclick=\"skincareApp.proceedToSubmission()\" data-bs-dismiss=\"modal\">\n                                <i class=\"fas fa-arrow-right\"></i> Continue to Submit\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Remove existing modal if it exists\n        const existingModal = document.getElementById('previewModal');\n        if (existingModal) {\n            existingModal.remove();\n        }\n\n        // Add modal to DOM\n        document.body.insertAdjacentHTML('beforeend', modalHTML);\n\n        // Show the modal\n        const modal = new bootstrap.Modal(document.getElementById('previewModal'));\n        modal.show();\n    }\n\n    proceedToSubmission() {\n        // Navigate to the last step (contact section)\n        if (window.progressNav) {\n            window.progressNav.goToStep(6);\n        }\n    }\n}\n\n// Progress and Navigation Class for Enhanced UX\nclass ProgressNavigation {\n    constructor(app) {\n        this.app = app;\n        this.currentStep = 1;\n        this.totalSteps = 6;\n        this.sections = [\n            'skinTypeSection',\n            'baseFormatSection', \n            'keyActivesSection',\n            'extractsSection',\n            'boostersSection',\n            'contactSection'\n        ];\n        this.init();\n    }\n\n    init() {\n        this.bindNavigationEvents();\n        this.updateProgressBar();\n        this.showCurrentStep();\n    }\n\n    bindNavigationEvents() {\n        const nextBtn = document.getElementById('nextBtn');\n        const prevBtn = document.getElementById('prevBtn');\n\n        nextBtn?.addEventListener('click', () => this.nextStep());\n        prevBtn?.addEventListener('click', () => this.prevStep());\n\n        // Allow clicking on progress steps\n        document.querySelectorAll('.progress-step').forEach((step, index) => {\n            step.addEventListener('click', () => this.goToStep(index + 1));\n        });\n    }\n\n    nextStep() {\n        if (this.validateCurrentStep()) {\n            this.currentStep++;\n            this.updateStep();\n        }\n    }\n\n    prevStep() {\n        this.currentStep--;\n        this.updateStep();\n    }\n\n    goToStep(step) {\n        this.currentStep = step;\n        this.updateStep();\n    }\n\n    updateStep() {\n        this.showCurrentStep();\n        this.updateProgressBar();\n        this.updateNavigationButtons();\n        this.app.updateAllSidebarSections(); // Ensure sidebar stays updated\n        this.scrollToTop();\n    }\n\n    showCurrentStep() {\n        // Hide all sections\n        this.sections.forEach(sectionId => {\n            document.getElementById(sectionId).style.display = 'none';\n        });\n\n        // Show current section\n        if (this.currentStep <= this.sections.length) {\n            document.getElementById(this.sections[this.currentStep - 1]).style.display = 'block';\n        }\n\n        // Show/hide submit section\n        const submitSection = document.getElementById('submitSection');\n        const formNavigation = document.querySelector('.form-navigation');\n        \n        if (this.currentStep > this.sections.length) {\n            submitSection.style.display = 'block';\n            formNavigation.style.display = 'none';\n        } else {\n            submitSection.style.display = 'none';\n            formNavigation.style.display = 'block';\n        }\n    }\n\n    updateProgressBar() {\n        // Update progress bar fill\n        const progressFill = document.getElementById('progressBarFill');\n        const percentage = (this.currentStep / this.totalSteps) * 100;\n        if (progressFill) {\n            progressFill.style.width = `${percentage}%`;\n        }\n\n        // Update step indicators\n        document.querySelectorAll('.progress-step').forEach((step, index) => {\n            step.classList.remove('active', 'completed');\n            if (index + 1 < this.currentStep) {\n                step.classList.add('completed');\n                step.querySelector('.step-icon').innerHTML = '<i class=\"fas fa-check\"></i>';\n            } else if (index + 1 === this.currentStep) {\n                step.classList.add('active');\n                step.querySelector('.step-icon').textContent = index + 1;\n            } else {\n                step.querySelector('.step-icon').textContent = index + 1;\n            }\n        });\n    }\n\n    updateNavigationButtons() {\n        const nextBtn = document.getElementById('nextBtn');\n        const prevBtn = document.getElementById('prevBtn');\n\n        // Previous button\n        if (prevBtn) {\n            prevBtn.disabled = this.currentStep <= 1;\n        }\n\n        // Next button\n        if (nextBtn) {\n            if (this.currentStep >= this.sections.length) {\n                nextBtn.textContent = 'Review & Submit';\n                nextBtn.innerHTML = '<i class=\"fas fa-paper-plane\"></i> Review & Submit';\n            } else {\n                nextBtn.innerHTML = 'Next Step <i class=\"fas fa-arrow-right\"></i>';\n            }\n        }\n    }\n\n    validateCurrentStep() {\n        const currentSection = this.sections[this.currentStep - 1];\n        \n        // Required steps validation\n        if (currentSection === 'skinTypeSection') {\n            const selected = document.querySelectorAll('input[name=\"skinType\"]:checked');\n            if (selected.length === 0) {\n                this.app.displayError('skinTypeError', 'Please select your skin type');\n                return false;\n            }\n        }\n\n        if (currentSection === 'keyActivesSection') {\n            const selected = document.querySelectorAll('input[name=\"keyActives\"]:checked');\n            if (selected.length === 0) {\n                this.app.displayError('keyActivesError', 'Please select at least one key active ingredient');\n                return false;\n            }\n        }\n\n        if (currentSection === 'contactSection') {\n            const nameField = document.getElementById('fullName');\n            const emailField = document.getElementById('email');\n            \n            if (!nameField.value.trim()) {\n                this.app.displayError('fullNameError', 'Name is required');\n                return false;\n            }\n            \n            if (!emailField.value.trim() || !this.isValidEmail(emailField.value)) {\n                this.app.displayError('emailError', 'Valid email is required');\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isValidEmail(email) {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    }\n\n    scrollToTop() {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n}\n\n// Initialize the app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.skincareApp = new SkincareApp();\n    window.progressNav = new ProgressNavigation(window.skincareApp);\n    \n    // Initialize Bootstrap tooltips\n    const tooltips = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    tooltips.forEach(tooltip => new bootstrap.Tooltip(tooltip));\n});","size_bytes":37256},"styles.css":{"content":"/* Sleek Skincare App Styles */\n\n:root {\n    --primary-color: #667eea;\n    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    --text-primary: #2d3748;\n    --text-secondary: #718096;\n    --bg-light: #f7fafc;\n    --border-color: #e2e8f0;\n    --border-radius: 12px;\n    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);\n    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.15);\n    --transition: all 0.3s ease;\n}\n\n/* Base Styles */\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: var(--bg-light);\n    line-height: 1.6;\n    color: var(--text-primary);\n    margin: 0;\n    padding: 0;\n}\n\n/* Header Section */\n.bg-gradient-primary {\n    background: var(--primary-gradient) !important;\n}\n\n/* Progress Bar */\n.progress-container {\n    background: white;\n    border-radius: 16px;\n    padding: 1.5rem;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n    border: 1px solid var(--border-color);\n}\n\n.progress-bar-wrapper {\n    position: relative;\n    margin-bottom: 1rem;\n}\n\n.progress-bar-track {\n    width: 100%;\n    height: 8px;\n    background: #e9ecef;\n    border-radius: 4px;\n    position: relative;\n}\n\n.progress-bar-fill {\n    height: 100%;\n    background: var(--primary-gradient);\n    border-radius: 4px;\n    width: 16.67%;\n    transition: width 0.3s ease;\n}\n\n.progress-steps {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 1rem;\n}\n\n.progress-step {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    opacity: 0.5;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.progress-step.active {\n    opacity: 1;\n}\n\n.progress-step.completed {\n    opacity: 1;\n}\n\n.step-icon {\n    width: 2rem;\n    height: 2rem;\n    border-radius: 50%;\n    background: #e9ecef;\n    color: #6c757d;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: 600;\n    font-size: 0.8rem;\n    margin-bottom: 0.5rem;\n    transition: all 0.3s ease;\n}\n\n.progress-step.active .step-icon {\n    background: var(--primary-color);\n    color: white;\n}\n\n.progress-step.completed .step-icon {\n    background: #28a745;\n    color: white;\n}\n\n.step-label {\n    font-size: 0.75rem;\n    font-weight: 500;\n    color: var(--text-secondary);\n    text-align: center;\n}\n\n.progress-step.active .step-label {\n    color: var(--primary-color);\n    font-weight: 600;\n}\n\n\n/* Form Wrapper - Compact & Sleek */\n.form-wrapper {\n    background: #f8fafc;\n    border-radius: 16px;\n    border: 1px solid var(--border-color);\n    padding: 2rem;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n    height: fit-content;\n}\n\n.sidebar-wrapper {\n    position: sticky;\n    top: 2rem;\n    height: fit-content;\n}\n\n/* Ensure Bootstrap grid works properly */\n@media (min-width: 992px) {\n    .sidebar-wrapper {\n        position: sticky;\n        top: 2rem;\n    }\n}\n\n.ingredients-sidebar {\n    background: white;\n    border: 1px solid #e9ecef;\n    border-radius: 16px;\n    padding: 1.25rem;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\n    height: fit-content;\n}\n\n.sidebar-header {\n    margin-bottom: 1rem;\n    padding-bottom: 0.75rem;\n    border-bottom: 2px solid #f1f5f9;\n    text-align: center;\n}\n\n.sidebar-tips {\n    background: #f1f5f9;\n    border-radius: 6px;\n    padding: 1rem;\n    margin-top: 1rem;\n    font-size: 0.85rem;\n    color: var(--text-secondary);\n}\n\n.sidebar-tips h5 {\n    color: var(--primary-color);\n    font-size: 0.85rem;\n    margin: 0 0 0.5rem 0;\n    font-weight: 600;\n}\n\n.sidebar-tips ul {\n    margin: 0;\n    padding-left: 1.2rem;\n    line-height: 1.4;\n}\n\n.sidebar-tips li {\n    margin-bottom: 0.25rem;\n}\n\n.sidebar-header h3 {\n    color: var(--primary-color);\n    font-size: 1.1rem;\n    font-weight: 700;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.formula-summary {\n    margin-bottom: 1rem;\n}\n\n.summary-row {\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin-bottom: 0.75rem;\n    padding: 0.5rem 0;\n    border-bottom: 1px solid #f1f5f9;\n    font-size: 0.85rem;\n}\n\n.summary-row:last-child {\n    border-bottom: none;\n    margin-bottom: 0;\n}\n\n.summary-row .label {\n    color: var(--text-secondary);\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    gap: 0.4rem;\n    min-width: 70px;\n    flex-shrink: 0;\n}\n\n.summary-row .label i {\n    color: var(--primary-color);\n    font-size: 0.75rem;\n    width: 12px;\n}\n\n.summary-row .value {\n    color: var(--text-primary);\n    font-weight: 500;\n    text-align: right;\n    flex: 1;\n    margin-left: 0.5rem;\n    line-height: 1.3;\n}\n\n.value-with-counter {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    gap: 0.5rem;\n    flex: 1;\n}\n\n.actives-row .value {\n    margin-right: 0;\n}\n\n.counter {\n    background: var(--primary-color);\n    color: white;\n    padding: 0.1rem 0.4rem;\n    font-size: 0.7rem;\n    font-weight: 600;\n    border-radius: 10px;\n    line-height: 1.2;\n    flex-shrink: 0;\n}\n\n.extras-list {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n}\n\n.extras-items:empty {\n    display: none;\n}\n\n.extras-items:not(:empty) + .extras-items:not(:empty)::before {\n    content: \"+ \";\n    color: var(--text-secondary);\n}\n\n.selected-items {\n    min-height: 24px;\n}\n\n.placeholder {\n    color: #9ca3af;\n    font-style: italic;\n    font-size: 0.85rem;\n    text-align: center;\n    padding: 0.75rem;\n    background: #f9fafb;\n    border-radius: 6px;\n    border: 1px dashed #d1d5db;\n}\n\n.ingredient-tag {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #5a6fd8 100%);\n    color: white;\n    padding: 0.35rem 0.75rem;\n    border-radius: 20px;\n    font-size: 0.8rem;\n    font-weight: 500;\n    display: inline-flex;\n    align-items: center;\n    gap: 0.35rem;\n    margin: 0.3rem 0.3rem 0.3rem 0;\n    cursor: default;\n    box-shadow: 0 2px 4px rgba(102, 126, 234, 0.2);\n}\n\n.remove-ingredient {\n    background: rgba(255, 255, 255, 0.2);\n    border: none;\n    color: white;\n    width: 1rem;\n    height: 1rem;\n    border-radius: 2px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 0.7rem;\n    cursor: pointer;\n    transition: background 0.2s ease;\n    font-weight: bold;\n    line-height: 1;\n}\n\n.remove-ingredient:hover {\n    background: rgba(255, 255, 255, 0.4);\n}\n\n@keyframes slideInScale {\n    from {\n        opacity: 0;\n        transform: scale(0.8) translateY(-10px);\n    }\n    to {\n        opacity: 1;\n        transform: scale(1) translateY(0);\n    }\n}\n\n.sidebar-footer {\n    text-align: center;\n    padding-top: 1.5rem;\n    border-top: 2px solid #f1f5f9;\n    margin-top: 1.5rem;\n}\n\n.preview-btn {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #5a6fd8 100%);\n    color: white;\n    border: none;\n    padding: 0.875rem 2rem;\n    border-radius: 25px;\n    font-size: 0.9rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    width: 100%;\n    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n}\n\n.preview-btn:hover:not(:disabled) {\n    background: linear-gradient(135deg, #5a6fd8 0%, #4f63d2 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.preview-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n/* Form Content */\n.form-content {\n    background: white;\n}\n\n.sleek-form {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n\n/* Form Styling - Compact with Section Cards */\n.sleek-form {\n    margin-top: 0;\n}\n\n.form-section-card {\n    background: white;\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    margin-bottom: 1.5rem;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);\n    transition: all 0.2s ease;\n    display: none; /* Hide all sections by default */\n}\n\n/* Show only the first section initially */\n#skinTypeSection {\n    display: block;\n}\n\n.form-section-card:hover {\n    border-color: rgba(102, 126, 234, 0.3);\n    box-shadow: 0 3px 12px rgba(102, 126, 234, 0.12);\n}\n\n.section-container {\n    padding: 1.5rem;\n}\n\n/* Navigation */\n.form-navigation {\n    background: white;\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    padding: 1.25rem;\n    margin-top: 1.5rem;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);\n}\n\n.nav-buttons {\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\n.nav-btn {\n    padding: 0.75rem 1.5rem;\n    border: 2px solid var(--primary-color);\n    border-radius: 25px;\n    font-weight: 600;\n    font-size: 0.9rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.prev-btn {\n    background: white;\n    color: var(--primary-color);\n}\n\n.next-btn {\n    background: var(--primary-color);\n    color: white;\n}\n\n.nav-btn:hover:not(:disabled) {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n}\n\n.prev-btn:hover:not(:disabled) {\n    background: var(--primary-color);\n    color: white;\n}\n\n.nav-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none !important;\n    box-shadow: none !important;\n}\n\n/* Enhanced Submit Section */\n.submit-section {\n    background: white;\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    padding: 2rem;\n    margin-top: 1.5rem;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);\n    text-align: center;\n}\n\n.submit-info {\n    margin-bottom: 1.5rem;\n}\n\n.submit-info h4 {\n    color: var(--primary-color);\n    font-size: 1.1rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.submit-info p {\n    color: var(--text-secondary);\n    margin: 0;\n    font-size: 0.9rem;\n}\n\n.privacy-note {\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n    margin-top: 1rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n/* Step Headers - Compact Bootstrap Style */\n.step-header {\n    margin-bottom: 0.5rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.step-number {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--primary-color);\n    color: white;\n    width: 1.5rem;\n    height: 1.5rem;\n    border-radius: 50%;\n    font-weight: 600;\n    font-size: 0.75rem;\n    flex-shrink: 0;\n}\n\n.section-title {\n    font-size: 0.95rem;\n    font-weight: 600;\n    color: var(--text-primary);\n    margin: 0;\n}\n\n.step-description {\n    color: var(--text-secondary);\n    font-size: 0.8rem;\n    margin: 0.25rem 0 0.6rem 0;\n    line-height: 1.4;\n}\n\n.section-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 1rem;\n}\n\n.counter-badge {\n    background: var(--primary-color);\n    color: white;\n    padding: 0.25rem 0.5rem;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    font-weight: 600;\n}\n\n/* Bootstrap Grid Layout - No custom grid needed */\n\n/* Checkbox and Radio Items - Compact Bootstrap Style */\n.checkbox-item,\n.radio-item {\n    display: flex;\n    align-items: center;\n    padding: 0.8rem 1rem;\n    border: 1px solid #e2e6ea;\n    border-radius: 8px;\n    transition: all 0.2s ease;\n    background: white;\n    min-height: 48px;\n    cursor: pointer;\n    user-select: none;\n    margin-bottom: 0.5rem;\n}\n\n.checkbox-item:hover,\n.radio-item:hover {\n    border-color: var(--primary-color);\n    background: rgba(102, 126, 234, 0.02);\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.08);\n}\n\n.checkbox-item:has(.form-check-input:checked),\n.radio-item:has(.form-check-input:checked) {\n    border-color: var(--primary-color);\n    background: rgba(102, 126, 234, 0.05);\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.1);\n}\n\n/* Form Controls - Simplified for Better Performance */\n.form-check-input {\n    margin-right: 0.75rem;\n    width: 1.1rem;\n    height: 1.1rem;\n    border: 2px solid var(--border-color);\n    transition: all 0.2s ease;\n    cursor: pointer;\n    position: relative;\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    border-radius: 4px;\n    background: white;\n    flex-shrink: 0;\n}\n\n.form-check-input:checked {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.15);\n}\n\n.form-check-input:checked::after {\n    content: '✓';\n    position: absolute;\n    top: -2px;\n    left: 1px;\n    color: white;\n    font-size: 0.8rem;\n    font-weight: bold;\n    line-height: 1;\n}\n\n.form-check-input:focus {\n    box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.25);\n    border-color: var(--primary-color);\n    outline: none;\n}\n\n.form-check-input:hover:not(:disabled):not(:checked) {\n    border-color: var(--primary-color);\n    background-color: rgba(102, 126, 234, 0.05);\n}\n\n.form-check-input[type=\"radio\"] {\n    border-radius: 50%;\n}\n\n.form-check-input[type=\"radio\"]:checked::after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: 6px;\n    height: 6px;\n    border-radius: 50%;\n    background: white;\n}\n\n/* Labels */\n.checkbox-label,\n.radio-label {\n    font-weight: 500;\n    color: var(--text-primary);\n    cursor: pointer;\n    flex: 1;\n    transition: var(--transition);\n    font-size: 0.95rem;\n    line-height: 1.3;\n    display: flex;\n    flex-direction: column;\n}\n\n/* Ingredient Benefits */\n.ingredient-name {\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n}\n\n.ingredient-benefit {\n    font-size: 0.8rem;\n    color: var(--primary-color);\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n}\n\n.ingredient-benefit i {\n    font-size: 0.7rem;\n}\n\n/* Help Links */\n.help-link {\n    color: var(--primary-color);\n    text-decoration: none;\n    font-weight: 500;\n    font-size: 0.85rem;\n}\n\n.help-link:hover {\n    color: #5a6fd8;\n    text-decoration: underline;\n}\n\n.option-hint {\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n    font-weight: 400;\n    margin-top: 0.25rem;\n}\n\n.checkbox-item:hover .checkbox-label,\n.radio-item:hover .radio-label {\n    color: var(--primary-color);\n}\n\n/* Checked States - Simplified */\n.checkbox-item:has(input:checked),\n.radio-item:has(input:checked) {\n    border-color: var(--primary-color);\n    background: #f0f4ff;\n}\n\n.checkbox-item:has(input:checked) .checkbox-label,\n.radio-item:has(input:checked) .radio-label {\n    color: var(--primary-color);\n    font-weight: 600;\n}\n\n/* Input Groups */\n.input-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.input-label {\n    font-weight: 500;\n    color: var(--text-primary);\n    font-size: 0.9rem;\n    margin-bottom: 0.25rem;\n}\n\n.sleek-input {\n    padding: 0.75rem 1rem;\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    font-size: 0.95rem;\n    font-family: inherit;\n    transition: var(--transition);\n    background: #fafafa;\n    width: 100%;\n}\n\n.sleek-input:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    background: white;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.sleek-input::placeholder {\n    color: var(--text-secondary);\n}\n\n/* Submit Section */\n.submit-section {\n    text-align: center;\n    padding-top: 2rem;\n}\n\n.sleek-button {\n    background: var(--primary-color);\n    color: white;\n    border: none;\n    padding: 0.875rem 2rem;\n    border-radius: 6px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n}\n\n.sleek-button:hover:not(:disabled) {\n    background: #5a6fd8;\n}\n\n.sleek-button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n/* Error Messages */\n.error-message {\n    color: #e53e3e;\n    font-size: 0.875rem;\n    margin-top: 0.5rem;\n    display: none;\n    animation: slideDown 0.3s ease;\n}\n\n.error-message.show,\n.error-message.d-block {\n    display: block !important;\n}\n\n@keyframes slideDown {\n    from {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Status Messages */\n.status-message {\n    margin-top: 1.5rem;\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    display: none;\n    animation: fadeIn 0.5s ease;\n}\n\n.status-message.success {\n    background: #f0fff4;\n    color: #22543d;\n    border: 2px solid #9ae6b4;\n    display: block;\n}\n\n.status-message.error {\n    background: #fed7d7;\n    color: #742a2a;\n    border: 2px solid #fc8181;\n    display: block;\n}\n\n.status-message.formulation-results {\n    background: linear-gradient(135deg, #f8f9ff 0%, #fff 100%);\n    border: 2px solid var(--primary-color);\n    color: var(--text-primary);\n    display: block;\n    padding: 2rem;\n    max-width: none;\n}\n\n/* Formulation Results Styling */\n.formulation-header {\n    text-align: center;\n    margin-bottom: 2rem;\n    padding-bottom: 1rem;\n    border-bottom: 2px solid var(--border-color);\n}\n\n.formulation-header h3 {\n    font-size: 1.5rem;\n    color: var(--primary-color);\n    margin: 1rem 0;\n    font-weight: 600;\n}\n\n.formulation-header .profile-badge {\n    background: var(--primary-gradient);\n    color: white;\n    padding: 0.5rem 1rem;\n    border-radius: 25px;\n    font-size: 0.9rem;\n    font-weight: 500;\n    display: inline-block;\n}\n\n.formulation-description {\n    background: rgba(102, 126, 234, 0.05);\n    padding: 1rem;\n    border-radius: 8px;\n    border-left: 4px solid var(--primary-color);\n    margin: 1rem 0;\n    font-style: italic;\n}\n\n.formulation-breakdown h4 {\n    color: var(--primary-color);\n    margin: 1.5rem 0 1rem 0;\n    font-weight: 600;\n}\n\n.formula-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 1rem 0;\n    background: white;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.formula-table th {\n    background: var(--primary-color);\n    color: white;\n    padding: 0.75rem;\n    text-align: left;\n    font-weight: 600;\n}\n\n.formula-table td {\n    padding: 0.75rem;\n    border-bottom: 1px solid #eee;\n}\n\n.formula-table tr:nth-child(even) {\n    background: #f8f9ff;\n}\n\n.formula-table tr:last-child td {\n    border-bottom: none;\n}\n\n.recommendations-section {\n    background: #fff3cd;\n    border: 1px solid #ffeaa7;\n    padding: 1rem;\n    border-radius: 8px;\n    margin: 1.5rem 0;\n}\n\n.recommendations-section h4 {\n    color: #856404;\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n}\n\n.recommendations-section ul {\n    margin: 0.5rem 0 0 0;\n    padding-left: 1.5rem;\n}\n\n.recommendations-section li {\n    margin-bottom: 0.5rem;\n    color: #856404;\n}\n\n.pdf-section {\n    background: #e8f5e8;\n    border: 1px solid #9ae6b4;\n    padding: 1rem;\n    border-radius: 8px;\n    margin: 1.5rem 0;\n    text-align: center;\n}\n\n.pdf-section h4 {\n    color: #22543d;\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n}\n\n.pdf-download-btn {\n    background: var(--primary-gradient);\n    color: white;\n    padding: 0.75rem 2rem;\n    border-radius: 25px;\n    text-decoration: none;\n    font-weight: 600;\n    display: inline-block;\n    margin-top: 0.5rem;\n    transition: var(--transition);\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n.pdf-download-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);\n    color: white;\n    text-decoration: none;\n}\n\n.formulation-footer {\n    text-align: center;\n    padding-top: 1rem;\n    margin-top: 2rem;\n    border-top: 1px solid var(--border-color);\n    color: var(--text-secondary);\n    font-size: 0.9rem;\n}\n\n.formulation-footer p {\n    margin: 0.25rem 0;\n}\n\n/* Formulation Preview Styles */\n.formulation-preview {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.preview-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n    padding-bottom: 1rem;\n    border-bottom: 2px solid var(--border-color);\n}\n\n.preview-header h3 {\n    color: var(--primary-color);\n    font-size: 1.1rem;\n    margin: 0;\n}\n\n.close-preview {\n    background: none;\n    border: none;\n    color: var(--text-secondary);\n    cursor: pointer;\n    padding: 0.5rem;\n    border-radius: 50%;\n    transition: var(--transition);\n}\n\n.close-preview:hover {\n    background: var(--border-color);\n    color: var(--text-primary);\n}\n\n.preview-content {\n    flex: 1;\n    overflow-y: auto;\n}\n\n.preview-content h4 {\n    color: var(--primary-color);\n    font-size: 1rem;\n    margin: 0 0 1rem 0;\n    line-height: 1.3;\n}\n\n.preview-description {\n    color: var(--text-secondary);\n    font-size: 0.875rem;\n    margin-bottom: 1.5rem;\n    line-height: 1.4;\n}\n\n.preview-formula h5 {\n    color: var(--text-primary);\n    font-size: 0.9rem;\n    margin: 0 0 0.75rem 0;\n    font-weight: 600;\n}\n\n.preview-ingredient {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.5rem 0;\n    border-bottom: 1px solid var(--border-color);\n    font-size: 0.875rem;\n}\n\n.preview-ingredient:last-child {\n    border-bottom: none;\n}\n\n.preview-ingredient span:first-child {\n    color: var(--text-primary);\n    font-weight: 500;\n}\n\n.preview-ingredient span:last-child {\n    color: var(--primary-color);\n    font-weight: 600;\n}\n\n.preview-actions {\n    margin-top: 2rem;\n    padding-top: 1rem;\n    border-top: 1px solid var(--border-color);\n}\n\n.back-to-edit {\n    background: var(--primary-gradient);\n    color: white;\n    border: none;\n    padding: 0.75rem 1.5rem;\n    border-radius: 25px;\n    font-size: 0.9rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: var(--transition);\n    width: 100%;\n}\n\n.back-to-edit:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n/* Compatibility Warnings */\n.compatibility-warning {\n    background: #fff3cd;\n    border: 2px solid #ffeaa7;\n    color: #856404;\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    margin-top: 1rem;\n    display: none;\n    animation: slideUp 0.3s ease;\n}\n\n.compatibility-warning.show {\n    display: block;\n}\n\n.compatibility-warning i {\n    color: #f39c12;\n    margin-right: 0.5rem;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Footer */\nfooter {\n    color: var(--text-secondary);\n    font-size: 0.9rem;\n    margin-top: 3rem;\n}\n\n/* Responsive Design */\n@media (max-width: 1024px) {\n    .form-wrapper {\n        padding: 1.75rem 1.25rem;\n    }\n    \n    .ingredients-sidebar {\n        padding: 1.5rem;\n    }\n}\n\n@media (max-width: 768px) {\n    .form-wrapper {\n        padding: 1.25rem;\n    }\n    \n    .sidebar-wrapper {\n        order: -1;\n        position: static !important;\n    }\n    \n    .ingredients-sidebar {\n        position: static;\n        padding: 1.25rem;\n    }\n    \n    .sleek-button {\n        width: 100%;\n        padding: 1rem 2rem;\n    }\n    \n    .section-header {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n    }\n    \n    .step-number {\n        width: 1.5rem;\n        height: 1.5rem;\n        font-size: 0.75rem;\n    }\n    \n    .section-title {\n        font-size: 0.9rem;\n    }\n    \n    .step-description {\n        font-size: 0.8rem;\n    }\n}\n\n@media (max-width: 480px) {\n    .form-wrapper {\n        padding: 1rem;\n    }\n    \n    .ingredients-sidebar {\n        padding: 1rem;\n    }\n    \n    .checkbox-item,\n    .radio-item {\n        padding: 0.6rem;\n    }\n    \n    .form-section {\n        margin-bottom: 1.5rem;\n    }\n}\n\n/* Simplified animations */\n.fade-in {\n    animation: fadeIn 0.2s ease;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0.5; }\n    to { opacity: 1; }\n}\n\n/* Accessibility */\n.form-check-input:focus-visible {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n.sleek-input:focus-visible {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n\n/* Smooth transitions */\nhtml {\n    scroll-behavior: smooth;\n}\n\n/* Loading state */\n.loading {\n    opacity: 0.7;\n    pointer-events: none;\n}\n\n/* Disabled state for max selections */\n.checkbox-item:has(input:disabled) {\n    opacity: 0.5;\n    cursor: not-allowed;\n    pointer-events: none;\n}\n\n/* Preview Modal Styles */\n.preview-section {\n    margin-bottom: 1rem;\n    padding-bottom: 0.5rem;\n    border-bottom: 1px solid #e9ecef;\n}\n\n.preview-section:last-child {\n    border-bottom: none;\n}\n\n.benefits-list {\n    list-style: none;\n    padding-left: 0;\n}\n\n.benefits-list li {\n    margin-bottom: 0.5rem;\n    padding-left: 1.5rem;\n    position: relative;\n}\n\n.benefits-list li i {\n    position: absolute;\n    left: 0;\n    top: 0.2rem;\n}","size_bytes":24550},"index.php":{"content":"<?php\n/**\n * Main entry point for the Skincare Formulation App\n * Serves the frontend with PHP backend support\n */\n\n// Enable error reporting for development\nerror_reporting(E_ALL);\nini_set('display_errors', 1);\n\n// Set content type\nheader('Content-Type: text/html; charset=UTF-8');\n\n// Load the HTML content\ninclude 'index.html';\n?>","size_bytes":333},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install PHP and PostgreSQL packages for backend\n[x] 2. Create PHP backend files for database connectivity and form handling\n[x] 3. Fix checkbox smoothness issues in CSS\n[x] 4. Update HTML form to submit to PHP backend\n[x] 5. Configure workflow to serve PHP application\n[x] 6. Test database connectivity with Supabase (fallback mode working)\n[x] 7. Verify form submission works with database (fallback mode working)\n[x] 8. Restart the workflow to see if the project is working\n[x] 9. Verify the project is working using the feedback tool\n[x] 10. Inform user the import is completed and mark as completed\n[x] 11. Simplify form page and make it more user-friendly\n[x] 12. Restructure JavaScript code for better organization\n[x] 13. Fixed Bootstrap grid layout for formula section sidebar display\n[x] 14. Replaced missing banner image with clean Bootstrap header\n[x] 15. Made form layout compact and sleek with proper Bootstrap typography\n[x] 16. Added separate card containers for clear form section visual separation\n[x] 17. Improved sidebar visual design with cleaner layout and better styling\n[x] 18. Enhanced user experience with comprehensive improvements:\n    • Added interactive progress bar with step navigation\n    • Included ingredient benefits and icons for better understanding\n    • Implemented step-by-step navigation with validation\n    • Added help text and guidance throughout the form\n    • Enhanced submit experience with clear messaging\n    • Added tooltips for better user guidance\n[x] 19. Fixed sidebar real-time updates when form selections are made\n[x] 20. Implemented comprehensive preview functionality with modal popup showing:\n    • Custom formula title generation based on selections\n    • Complete summary of all user selections\n    • Estimated benefits based on chosen ingredients  \n    • Compatibility warnings for conflicting ingredients\n    • Option to continue to submission or close preview\n[x] 21. Removed localStorage functionality as requested:\n    • Form now resets completely on page reload  \n    • Data stored as JSON in memory during session only\n    • Clean JSON structure passed to backend on submission\n    • No data persistence between browser sessions\n[x] 22. Fixed visual glitch on page reload:\n    • Form sections now hidden by CSS immediately on load\n    • Eliminated flash of all sections appearing then disappearing  \n    • Only first section visible by default for professional appearance\n    • Smooth loading experience without content jumping","size_bytes":2540}},"version":1}