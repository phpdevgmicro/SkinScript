{"file_contents":{"replit.md":{"content":"# Build Your Own Energizing Mist - Skincare Formulation Tool\n\n## Overview\n\nThis is an interactive web application that allows users to create personalized skincare formulations, specifically energizing mists. The app guides users through a multi-step process to select skin types, base formats, key active ingredients, botanical extracts, and boosters while enforcing compatibility rules between ingredients. The application features a modern, responsive design with form validation and data persistence capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Single Page Application (SPA)**: Built with vanilla HTML, CSS, and JavaScript without frameworks\n- **Component-Based Design**: Modular CSS classes and JavaScript methods for different form sections\n- **Responsive Layout**: Mobile-first design using CSS Grid and Flexbox with clamp() functions for fluid typography\n- **Progressive Enhancement**: Form works without JavaScript, with enhanced UX when enabled\n\n### Form Management System\n- **Multi-Step Form Flow**: Sections for skin type, base format, key actives, extracts, boosters, and contact information\n- **State Management**: Centralized form data object tracking user selections across all sections\n- **Validation Engine**: Custom validation rules for required fields, selection limits, and ingredient compatibility\n- **Data Persistence**: localStorage integration for saving and restoring user progress\n\n### Ingredient Compatibility System\n- **Rule-Based Validation**: Predefined incompatible ingredient combinations (retinol + vitamin C, etc.)\n- **Dynamic UI Updates**: Real-time enabling/disabling of options based on current selections\n- **Selection Limits**: Maximum of 3 key active ingredients with counter tracking\n- **Conflict Prevention**: Automatic validation prevents incompatible ingredient selection\n\n### User Interface Design\n- **Modern CSS Architecture**: Custom properties, gradients, and backdrop filters for visual appeal\n- **Interactive Components**: Custom checkbox cards, radio buttons, and form controls with hover/focus states\n- **Icon Integration**: Font Awesome icons throughout the interface for visual hierarchy\n- **Loading States**: Visual feedback for form submission and processing states\n\n### Data Flow Architecture\n- **Event-Driven Updates**: DOM event listeners trigger state changes and UI updates\n- **Unidirectional Data Flow**: Form data flows from user input → validation → state update → UI refresh\n- **Error Handling**: Comprehensive validation with user-friendly error messages\n- **Success Feedback**: Confirmation systems for successful form completion\n\n## External Dependencies\n\n### CDN Resources\n- **Google Fonts**: Inter font family for typography\n- **Font Awesome**: Icon library (v6.4.0) for UI elements\n- **Pixabay Images**: External image hosting for hero section visuals\n\n### Browser APIs\n- **localStorage**: Client-side data persistence for form state\n- **DOM APIs**: Event handling, form validation, and dynamic content updates\n- **CSS Features**: Modern CSS properties including backdrop-filter, clamp(), and CSS Grid\n\n### Potential Integrations\n- **Email Services**: Form submission likely requires backend email integration\n- **Analytics**: User interaction tracking for formulation preferences\n- **Database Storage**: Future enhancement for saving user formulations and preferences","size_bytes":3450},"script.js":{"content":"/**\n * Skincare Formulation App - Main JavaScript File\n * Handles form validation, ingredient compatibility, and user interactions\n */\n\nclass SkincareFormulationApp {\n    constructor() {\n        this.maxKeyActives = 3;\n        this.selectedKeyActives = 0;\n        this.formData = {\n            skinType: [],\n            baseFormat: '',\n            keyActives: [],\n            extracts: [],\n            boosters: [],\n            contact: {}\n        };\n        \n        // Ingredient compatibility rules\n        this.incompatibleCombinations = [\n            ['retinol', 'vitamin-c'],\n            ['retinol', 'niacinamide'],\n            ['vitamin-c', 'niacinamide']\n        ];\n        \n        this.init();\n    }\n\n    init() {\n        this.bindEventListeners();\n        this.loadSavedData();\n        this.updateFormState();\n        console.log('Skincare Formulation App initialized');\n    }\n\n    bindEventListeners() {\n        // Form submission\n        const form = document.getElementById('formulationForm');\n        form.addEventListener('submit', (e) => this.handleFormSubmit(e));\n\n        // Skin type checkboxes (multiple selection allowed)\n        const skinTypeInputs = document.querySelectorAll('input[name=\"skinType\"]');\n        skinTypeInputs.forEach(input => {\n            input.addEventListener('change', () => this.handleSkinTypeChange());\n        });\n\n        // Base format radio buttons\n        const baseFormatInputs = document.querySelectorAll('input[name=\"baseFormat\"]');\n        baseFormatInputs.forEach(input => {\n            input.addEventListener('change', () => this.handleBaseFormatChange());\n        });\n\n        // Key actives checkboxes with limit\n        const keyActiveInputs = document.querySelectorAll('input[name=\"keyActives\"]');\n        keyActiveInputs.forEach(input => {\n            input.addEventListener('change', () => this.handleKeyActivesChange());\n        });\n\n        // Extract checkboxes\n        const extractInputs = document.querySelectorAll('input[name=\"extracts\"]');\n        extractInputs.forEach(input => {\n            input.addEventListener('change', () => this.handleExtractsChange());\n        });\n\n        // Booster checkboxes\n        const boosterInputs = document.querySelectorAll('input[name=\"boosters\"]');\n        boosterInputs.forEach(input => {\n            input.addEventListener('change', () => this.handleBoostersChange());\n        });\n\n        // Contact form inputs\n        const contactInputs = document.querySelectorAll('#contactSection input, #contactSection textarea');\n        contactInputs.forEach(input => {\n            input.addEventListener('blur', () => this.validateContactField(input));\n            input.addEventListener('input', () => this.handleContactChange());\n        });\n\n        // Real-time form validation\n        document.addEventListener('change', () => {\n            this.updateFormState();\n            this.saveFormData();\n        });\n    }\n\n    handleSkinTypeChange() {\n        const selectedTypes = Array.from(document.querySelectorAll('input[name=\"skinType\"]:checked'))\n            .map(input => input.value);\n        \n        this.formData.skinType = selectedTypes;\n        this.clearError('skinTypeError');\n        this.updatePreview();\n        \n        // Add visual feedback\n        this.addSelectionFeedback('skinTypeSection');\n    }\n\n    handleBaseFormatChange() {\n        const selectedFormat = document.querySelector('input[name=\"baseFormat\"]:checked');\n        this.formData.baseFormat = selectedFormat ? selectedFormat.value : '';\n        this.updatePreview();\n        \n        this.addSelectionFeedback('baseFormatSection');\n    }\n\n    handleKeyActivesChange() {\n        const selectedActives = Array.from(document.querySelectorAll('input[name=\"keyActives\"]:checked'))\n            .map(input => input.value);\n        \n        this.selectedKeyActives = selectedActives.length;\n        this.formData.keyActives = selectedActives;\n        \n        // Update counter\n        const counter = document.getElementById('activesCounter');\n        counter.textContent = `(${this.selectedKeyActives}/${this.maxKeyActives} selected)`;\n        \n        // Disable/enable checkboxes based on limit\n        this.toggleKeyActivesAvailability();\n        \n        // Check for incompatible combinations\n        this.checkIngredientCompatibility();\n        \n        this.clearError('keyActivesError');\n        this.updatePreview();\n        this.addSelectionFeedback('keyActivesSection');\n    }\n\n    handleExtractsChange() {\n        const selectedExtracts = Array.from(document.querySelectorAll('input[name=\"extracts\"]:checked'))\n            .map(input => input.value);\n        \n        this.formData.extracts = selectedExtracts;\n        this.updatePreview();\n        this.addSelectionFeedback('extractsSection');\n    }\n\n    handleBoostersChange() {\n        const selectedBoosters = Array.from(document.querySelectorAll('input[name=\"boosters\"]:checked'))\n            .map(input => input.value);\n        \n        this.formData.boosters = selectedBoosters;\n        this.updatePreview();\n        this.addSelectionFeedback('boostersSection');\n    }\n\n    handleContactChange() {\n        const fullName = document.getElementById('fullName').value;\n        const email = document.getElementById('email').value;\n        const skinConcerns = document.getElementById('skinConcerns').value;\n        \n        this.formData.contact = {\n            fullName,\n            email,\n            skinConcerns\n        };\n        \n        this.updateFormState();\n    }\n\n    toggleKeyActivesAvailability() {\n        const keyActiveInputs = document.querySelectorAll('input[name=\"keyActives\"]');\n        \n        keyActiveInputs.forEach((input) => {\n            if (!input.checked && this.selectedKeyActives >= this.maxKeyActives) {\n                input.disabled = true;\n            } else {\n                input.disabled = false;\n            }\n        });\n    }\n\n    checkIngredientCompatibility() {\n        const selectedActives = this.formData.keyActives;\n        const warnings = [];\n        \n        this.incompatibleCombinations.forEach(combination => {\n            if (combination.every(ingredient => selectedActives.includes(ingredient))) {\n                warnings.push(`${this.formatIngredientName(combination[0])} and ${this.formatIngredientName(combination[1])} may not be compatible when used together.`);\n            }\n        });\n        \n        this.displayCompatibilityWarnings(warnings);\n    }\n\n    displayCompatibilityWarnings(warnings) {\n        // Remove existing warnings\n        const existingWarnings = document.querySelectorAll('.compatibility-warning');\n        existingWarnings.forEach(warning => warning.remove());\n        \n        if (warnings.length > 0) {\n            const keyActivesSection = document.getElementById('keyActivesSection');\n            const warningDiv = document.createElement('div');\n            warningDiv.className = 'compatibility-warning show';\n            warningDiv.innerHTML = `\n                <i class=\"fas fa-exclamation-triangle\"></i>\n                <strong>Compatibility Notice:</strong>\n                <ul style=\"margin-top: 0.5rem; margin-left: 1.5rem;\">\n                    ${warnings.map(warning => `<li>${warning}</li>`).join('')}\n                </ul>\n            `;\n            keyActivesSection.appendChild(warningDiv);\n        }\n    }\n\n    formatIngredientName(ingredient) {\n        return ingredient.split('-').map(word => \n            word.charAt(0).toUpperCase() + word.slice(1)\n        ).join(' ');\n    }\n\n    validateContactField(field) {\n        const value = field.value.trim();\n        const fieldName = field.name;\n        let isValid = true;\n        let errorMessage = '';\n        \n        switch (fieldName) {\n            case 'fullName':\n                if (!value) {\n                    isValid = false;\n                    errorMessage = 'Full name is required';\n                } else if (value.length < 2) {\n                    isValid = false;\n                    errorMessage = 'Name must be at least 2 characters long';\n                }\n                break;\n                \n            case 'email':\n                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                if (!value) {\n                    isValid = false;\n                    errorMessage = 'Email address is required';\n                } else if (!emailRegex.test(value)) {\n                    isValid = false;\n                    errorMessage = 'Please enter a valid email address';\n                }\n                break;\n        }\n        \n        this.displayFieldError(fieldName, errorMessage, !isValid);\n        return isValid;\n    }\n\n    displayFieldError(fieldName, message, show) {\n        const errorElement = document.getElementById(`${fieldName}Error`);\n        if (errorElement) {\n            errorElement.textContent = message;\n            errorElement.classList.toggle('show', show);\n        }\n    }\n\n    validateForm() {\n        let isValid = true;\n        const errors = [];\n        \n        // Validate skin type selection\n        if (this.formData.skinType.length === 0) {\n            errors.push('Please select at least one skin type');\n            this.showError('skinTypeError', 'Please select at least one skin type');\n            isValid = false;\n        }\n        \n        // Validate key actives selection\n        if (this.formData.keyActives.length === 0) {\n            errors.push('Please select at least one key active ingredient');\n            this.showError('keyActivesError', 'Please select at least one key active ingredient');\n            isValid = false;\n        }\n        \n        // Validate contact information\n        const fullNameValid = this.validateContactField(document.getElementById('fullName'));\n        const emailValid = this.validateContactField(document.getElementById('email'));\n        \n        if (!fullNameValid || !emailValid) {\n            isValid = false;\n        }\n        \n        return isValid;\n    }\n\n    showError(elementId, message) {\n        const errorElement = document.getElementById(elementId);\n        if (errorElement) {\n            errorElement.textContent = message;\n            errorElement.classList.add('show');\n        }\n    }\n\n    clearError(elementId) {\n        const errorElement = document.getElementById(elementId);\n        if (errorElement) {\n            errorElement.classList.remove('show');\n            errorElement.textContent = '';\n        }\n    }\n\n    updatePreview() {\n        const previewContent = document.getElementById('previewContent');\n        \n        if (this.hasAnySelections()) {\n            const previewHTML = this.generatePreviewHTML();\n            previewContent.innerHTML = previewHTML;\n        } else {\n            previewContent.innerHTML = '<p class=\"text-muted text-center fst-italic\">Make your selections above to see your custom formulation preview</p>';\n        }\n    }\n\n    hasAnySelections() {\n        return this.formData.skinType.length > 0 || \n               this.formData.baseFormat || \n               this.formData.keyActives.length > 0 || \n               this.formData.extracts.length > 0 || \n               this.formData.boosters.length > 0;\n    }\n\n    generatePreviewHTML() {\n        let html = '';\n        \n        if (this.formData.skinType.length > 0) {\n            html += `\n                <div class=\"preview-section\">\n                    <h4>Skin Type:</h4>\n                    <div class=\"preview-list\">\n                        ${this.formData.skinType.map(type => \n                            `<span class=\"preview-item\">${this.formatIngredientName(type)}</span>`\n                        ).join('')}\n                    </div>\n                </div>\n            `;\n        }\n        \n        if (this.formData.baseFormat) {\n            html += `\n                <div class=\"preview-section\">\n                    <h4>Base Format:</h4>\n                    <div class=\"preview-list\">\n                        <span class=\"preview-item\">${this.formatIngredientName(this.formData.baseFormat)}</span>\n                    </div>\n                </div>\n            `;\n        }\n        \n        if (this.formData.keyActives.length > 0) {\n            html += `\n                <div class=\"preview-section\">\n                    <h4>Key Active Ingredients:</h4>\n                    <div class=\"preview-list\">\n                        ${this.formData.keyActives.map(active => \n                            `<span class=\"preview-item\">${this.formatIngredientName(active)}</span>`\n                        ).join('')}\n                    </div>\n                </div>\n            `;\n        }\n        \n        if (this.formData.extracts.length > 0) {\n            html += `\n                <div class=\"preview-section\">\n                    <h4>Functional Extracts:</h4>\n                    <div class=\"preview-list\">\n                        ${this.formData.extracts.map(extract => \n                            `<span class=\"preview-item\">${this.formatIngredientName(extract)}</span>`\n                        ).join('')}\n                    </div>\n                </div>\n            `;\n        }\n        \n        if (this.formData.boosters.length > 0) {\n            html += `\n                <div class=\"preview-section\">\n                    <h4>Boosters & Hydrators:</h4>\n                    <div class=\"preview-list\">\n                        ${this.formData.boosters.map(booster => \n                            `<span class=\"preview-item\">${this.formatIngredientName(booster)}</span>`\n                        ).join('')}\n                    </div>\n                </div>\n            `;\n        }\n        \n        return html;\n    }\n\n    updateFormState() {\n        const submitBtn = document.getElementById('submitBtn');\n        const hasMinimumSelections = this.formData.skinType.length > 0 && \n                                    this.formData.keyActives.length > 0 &&\n                                    this.formData.contact.fullName &&\n                                    this.formData.contact.email;\n        \n        submitBtn.disabled = !hasMinimumSelections;\n    }\n\n    addSelectionFeedback(sectionId) {\n        const section = document.getElementById(sectionId);\n        section.classList.add('fade-in');\n        \n        setTimeout(() => {\n            section.classList.remove('fade-in');\n        }, 500);\n    }\n\n    saveFormData() {\n        try {\n            localStorage.setItem('skincareFormData', JSON.stringify(this.formData));\n        } catch (error) {\n            console.warn('Failed to save form data to localStorage:', error);\n        }\n    }\n\n    loadSavedData() {\n        try {\n            const savedData = localStorage.getItem('skincareFormData');\n            if (savedData) {\n                const parsedData = JSON.parse(savedData);\n                this.restoreFormState(parsedData);\n            }\n        } catch (error) {\n            console.warn('Failed to load saved form data:', error);\n        }\n    }\n\n    restoreFormState(data) {\n        // Restore skin type selections\n        if (data.skinType) {\n            data.skinType.forEach(type => {\n                const checkbox = document.getElementById(type);\n                if (checkbox) checkbox.checked = true;\n            });\n            this.formData.skinType = data.skinType;\n        }\n        \n        // Restore base format selection\n        if (data.baseFormat) {\n            const radio = document.getElementById(data.baseFormat);\n            if (radio) radio.checked = true;\n            this.formData.baseFormat = data.baseFormat;\n        }\n        \n        // Restore key actives selections\n        if (data.keyActives) {\n            data.keyActives.forEach(active => {\n                const checkbox = document.getElementById(active);\n                if (checkbox) checkbox.checked = true;\n            });\n            this.formData.keyActives = data.keyActives;\n            this.selectedKeyActives = data.keyActives.length;\n            this.toggleKeyActivesAvailability();\n        }\n        \n        // Restore extracts selections\n        if (data.extracts) {\n            data.extracts.forEach(extract => {\n                const checkbox = document.getElementById(extract);\n                if (checkbox) checkbox.checked = true;\n            });\n            this.formData.extracts = data.extracts;\n        }\n        \n        // Restore boosters selections\n        if (data.boosters) {\n            data.boosters.forEach(booster => {\n                const checkbox = document.getElementById(booster);\n                if (checkbox) checkbox.checked = true;\n            });\n            this.formData.boosters = data.boosters;\n        }\n        \n        // Restore contact information\n        if (data.contact) {\n            if (data.contact.fullName) {\n                document.getElementById('fullName').value = data.contact.fullName;\n            }\n            if (data.contact.email) {\n                document.getElementById('email').value = data.contact.email;\n            }\n            if (data.contact.skinConcerns) {\n                document.getElementById('skinConcerns').value = data.contact.skinConcerns;\n            }\n            this.formData.contact = data.contact;\n        }\n        \n        // Update UI state\n        this.updatePreview();\n        this.updateFormState();\n        \n        // Update actives counter\n        const counter = document.getElementById('activesCounter');\n        counter.textContent = `(${this.selectedKeyActives}/${this.maxKeyActives} selected)`;\n    }\n\n    async handleFormSubmit(event) {\n        event.preventDefault();\n        \n        if (!this.validateForm()) {\n            this.scrollToFirstError();\n            return;\n        }\n        \n        const submitBtn = document.getElementById('submitBtn');\n        const statusDiv = document.getElementById('submissionStatus');\n        \n        // Show loading state\n        submitBtn.disabled = true;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Submitting...';\n        \n        try {\n            // Prepare submission data\n            const submissionData = this.prepareSubmissionData();\n            \n            // Simulate API call (replace with actual backend integration)\n            await this.simulateFormSubmission(submissionData);\n            \n            // Show success message\n            statusDiv.className = 'status-message success';\n            statusDiv.innerHTML = `\n                <i class=\"fas fa-check-circle\"></i>\n                <strong>Request Submitted Successfully!</strong><br>\n                We'll review your custom formulation and get back to you within 24 hours at ${this.formData.contact.email}.\n            `;\n            \n            // Clear form data from localStorage\n            localStorage.removeItem('skincareFormData');\n            \n            // Scroll to success message\n            statusDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            \n        } catch (error) {\n            console.error('Form submission error:', error);\n            statusDiv.className = 'status-message error';\n            statusDiv.innerHTML = `\n                <i class=\"fas fa-exclamation-circle\"></i>\n                <strong>Submission Failed</strong><br>\n                Please try again. If the problem persists, contact support.\n            `;\n        } finally {\n            // Reset button state\n            submitBtn.disabled = false;\n            submitBtn.innerHTML = '<i class=\"fas fa-paper-plane\"></i> Submit Request';\n        }\n    }\n\n    prepareSubmissionData() {\n        const timestamp = new Date().toISOString();\n        \n        return {\n            timestamp,\n            formulation: {\n                skinType: this.formData.skinType,\n                baseFormat: this.formData.baseFormat,\n                keyActives: this.formData.keyActives,\n                extracts: this.formData.extracts,\n                boosters: this.formData.boosters\n            },\n            contact: this.formData.contact,\n            userAgent: navigator.userAgent,\n            screenResolution: `${screen.width}x${screen.height}`,\n            formVersion: '1.0'\n        };\n    }\n\n    async simulateFormSubmission(data) {\n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Log submission data for development\n        console.log('Form submission data:', data);\n        \n        // In a real application, this would be an actual API call:\n        // const response = await fetch('/api/formulations', {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify(data)\n        // });\n        // \n        // if (!response.ok) {\n        //     throw new Error('Network response was not ok');\n        // }\n        // \n        // return response.json();\n        \n        return { success: true, id: 'FORM_' + Date.now() };\n    }\n\n    scrollToFirstError() {\n        const firstError = document.querySelector('.error-message.show');\n        if (firstError) {\n            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n    }\n}\n\n// Initialize the application when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.skincareApp = new SkincareFormulationApp();\n});\n\n// Add some utility functions for enhanced user experience\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Add smooth scrolling for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n            }\n        });\n    });\n    \n    // Add keyboard navigation support\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' && e.target.type === 'checkbox') {\n            e.target.click();\n        }\n    });\n    \n    // Add focus management for accessibility\n    const checkboxCards = document.querySelectorAll('.checkbox-card');\n    checkboxCards.forEach(card => {\n        card.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const input = card.querySelector('input');\n                if (input && !input.disabled) {\n                    input.click();\n                }\n            }\n        });\n        \n        // Make cards focusable\n        card.setAttribute('tabindex', '0');\n    });\n});\n\n// Export for potential testing or external usage\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = SkincareFormulationApp;\n}\n","size_bytes":22925},"styles.css":{"content":"/* Sleek Skincare App Styles */\n\n:root {\n    --primary-color: #667eea;\n    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    --text-primary: #2d3748;\n    --text-secondary: #718096;\n    --bg-light: #f7fafc;\n    --border-color: #e2e8f0;\n    --border-radius: 12px;\n    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);\n    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.15);\n    --transition: all 0.3s ease;\n}\n\n/* Base Styles */\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: var(--bg-light);\n    line-height: 1.6;\n    color: var(--text-primary);\n    margin: 0;\n    padding: 0;\n}\n\n/* Container */\n.container {\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-md);\n    padding: 3rem 2.5rem;\n    margin: 2rem auto;\n    max-width: 900px;\n}\n\n/* Header */\n.display-5 {\n    font-size: 2.5rem;\n    font-weight: 700;\n    background: var(--primary-gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    margin-bottom: 0.5rem;\n}\n\n.text-muted {\n    color: var(--text-secondary);\n    font-size: 1.1rem;\n    margin-bottom: 0;\n}\n\n/* Form Styling */\n.sleek-form {\n    margin-top: 2rem;\n}\n\n.form-section {\n    margin-bottom: 2.5rem;\n    padding-bottom: 2rem;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.form-section:last-of-type {\n    border-bottom: none;\n    margin-bottom: 0;\n}\n\n/* Section Headers */\n.section-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: var(--text-primary);\n    margin-bottom: 1.5rem;\n    letter-spacing: -0.025em;\n}\n\n.section-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1.5rem;\n}\n\n.counter-badge {\n    background: var(--primary-gradient);\n    color: white;\n    padding: 0.25rem 0.75rem;\n    border-radius: 20px;\n    font-size: 0.875rem;\n    font-weight: 500;\n}\n\n/* Grid Layouts */\n.checkbox-grid,\n.radio-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1rem;\n}\n\n.input-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 1.5rem;\n}\n\n.input-grid .full-width {\n    grid-column: 1 / -1;\n}\n\n/* Checkbox and Radio Items */\n.checkbox-item,\n.radio-item {\n    display: flex;\n    align-items: center;\n    padding: 1rem;\n    border: 2px solid var(--border-color);\n    border-radius: var(--border-radius);\n    transition: var(--transition);\n    cursor: pointer;\n    background: #fafafa;\n    position: relative;\n    overflow: hidden;\n}\n\n.checkbox-item::before,\n.radio-item::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 4px;\n    height: 100%;\n    background: var(--primary-gradient);\n    transform: scaleY(0);\n    transition: var(--transition);\n}\n\n.checkbox-item:hover,\n.radio-item:hover {\n    border-color: var(--primary-color);\n    background: white;\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-sm);\n}\n\n.checkbox-item:hover::before,\n.radio-item:hover::before {\n    transform: scaleY(1);\n}\n\n/* Form Controls */\n.form-check-input {\n    margin-right: 0.75rem;\n    width: 1.2rem;\n    height: 1.2rem;\n    border: 2px solid var(--border-color);\n    transition: var(--transition);\n}\n\n.form-check-input:checked {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.form-check-input:focus {\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);\n    border-color: var(--primary-color);\n}\n\n/* Labels */\n.checkbox-label,\n.radio-label {\n    font-weight: 500;\n    color: var(--text-primary);\n    cursor: pointer;\n    flex: 1;\n    transition: var(--transition);\n}\n\n.checkbox-item:hover .checkbox-label,\n.radio-item:hover .radio-label {\n    color: var(--primary-color);\n}\n\n/* Checked States */\n.checkbox-item:has(input:checked),\n.radio-item:has(input:checked) {\n    border-color: var(--primary-color);\n    background: rgba(102, 126, 234, 0.05);\n    transform: translateY(-1px);\n    box-shadow: var(--shadow-sm);\n}\n\n.checkbox-item:has(input:checked)::before,\n.radio-item:has(input:checked)::before {\n    transform: scaleY(1);\n}\n\n.checkbox-item:has(input:checked) .checkbox-label,\n.radio-item:has(input:checked) .radio-label {\n    color: var(--primary-color);\n    font-weight: 600;\n}\n\n/* Input Groups */\n.input-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n.input-label {\n    font-weight: 500;\n    color: var(--text-primary);\n    font-size: 0.95rem;\n    margin-bottom: 0.25rem;\n}\n\n.sleek-input {\n    padding: 0.875rem 1rem;\n    border: 2px solid var(--border-color);\n    border-radius: 10px;\n    font-size: 1rem;\n    font-family: inherit;\n    transition: var(--transition);\n    background: #fafafa;\n    width: 100%;\n}\n\n.sleek-input:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    background: white;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.sleek-input::placeholder {\n    color: var(--text-secondary);\n}\n\n/* Submit Section */\n.submit-section {\n    text-align: center;\n    padding-top: 2rem;\n}\n\n.sleek-button {\n    background: var(--primary-gradient);\n    color: white;\n    border: none;\n    padding: 1rem 3rem;\n    border-radius: 50px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: var(--transition);\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n    position: relative;\n    overflow: hidden;\n}\n\n.sleek-button::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: var(--transition);\n}\n\n.sleek-button:hover:not(:disabled) {\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n}\n\n.sleek-button:hover:not(:disabled)::before {\n    left: 100%;\n}\n\n.sleek-button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n}\n\n/* Error Messages */\n.error-message {\n    color: #e53e3e;\n    font-size: 0.875rem;\n    margin-top: 0.5rem;\n    display: none;\n    animation: slideDown 0.3s ease;\n}\n\n.error-message.show,\n.error-message.d-block {\n    display: block !important;\n}\n\n@keyframes slideDown {\n    from {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Status Messages */\n.status-message {\n    margin-top: 1.5rem;\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    display: none;\n    animation: fadeIn 0.5s ease;\n}\n\n.status-message.success {\n    background: #f0fff4;\n    color: #22543d;\n    border: 2px solid #9ae6b4;\n    display: block;\n}\n\n.status-message.error {\n    background: #fed7d7;\n    color: #742a2a;\n    border: 2px solid #fc8181;\n    display: block;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n/* Compatibility Warnings */\n.compatibility-warning {\n    background: #fff3cd;\n    border: 2px solid #ffeaa7;\n    color: #856404;\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    margin-top: 1rem;\n    display: none;\n    animation: slideUp 0.3s ease;\n}\n\n.compatibility-warning.show {\n    display: block;\n}\n\n.compatibility-warning i {\n    color: #f39c12;\n    margin-right: 0.5rem;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Footer */\nfooter {\n    color: var(--text-secondary);\n    font-size: 0.9rem;\n    margin-top: 3rem;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .container {\n        margin: 1rem;\n        padding: 2rem 1.5rem;\n    }\n    \n    .display-5 {\n        font-size: 2rem;\n    }\n    \n    .checkbox-grid,\n    .radio-grid {\n        grid-template-columns: 1fr;\n        gap: 0.75rem;\n    }\n    \n    .input-grid {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n    \n    .sleek-button {\n        width: 100%;\n        padding: 1rem 2rem;\n    }\n    \n    .section-header {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n    }\n}\n\n@media (max-width: 480px) {\n    .container {\n        margin: 0.5rem;\n        padding: 1.5rem 1rem;\n    }\n    \n    .display-5 {\n        font-size: 1.75rem;\n    }\n    \n    .text-muted {\n        font-size: 1rem;\n    }\n    \n    .checkbox-item,\n    .radio-item {\n        padding: 0.75rem;\n    }\n    \n    .form-section {\n        margin-bottom: 2rem;\n    }\n}\n\n/* Accessibility */\n.form-check-input:focus-visible {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n.sleek-input:focus-visible {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n/* Smooth transitions */\nhtml {\n    scroll-behavior: smooth;\n}\n\n/* Loading state */\n.loading {\n    opacity: 0.7;\n    pointer-events: none;\n}\n\n/* Disabled state for max selections */\n.checkbox-item:has(input:disabled) {\n    opacity: 0.5;\n    cursor: not-allowed;\n    pointer-events: none;\n}","size_bytes":9126}},"version":1}